// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// makeArcList
IntegerMatrix makeArcList(int nn);
RcppExport SEXP _CIDnetworks_makeArcList(SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(makeArcList(nn));
    return rcpp_result_gen;
END_RCPP
}
// makeEdgeList
IntegerMatrix makeEdgeList(int nn);
RcppExport SEXP _CIDnetworks_makeEdgeList(SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(makeEdgeList(nn));
    return rcpp_result_gen;
END_RCPP
}
// makeEdgeListSelfies
IntegerMatrix makeEdgeListSelfies(int nn);
RcppExport SEXP _CIDnetworks_makeEdgeListSelfies(SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(makeEdgeListSelfies(nn));
    return rcpp_result_gen;
END_RCPP
}
// symBlock
NumericMatrix symBlock(NumericVector entries);
RcppExport SEXP _CIDnetworks_symBlock(SEXP entriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type entries(entriesSEXP);
    rcpp_result_gen = Rcpp::wrap(symBlock(entries));
    return rcpp_result_gen;
END_RCPP
}
// eldc
NumericVector eldc(NumericMatrix latentSpacePos, IntegerMatrix edgelist);
RcppExport SEXP _CIDnetworks_eldc(SEXP latentSpacePosSEXP, SEXP edgelistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type latentSpacePos(latentSpacePosSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgelist(edgelistSEXP);
    rcpp_result_gen = Rcpp::wrap(eldc(latentSpacePos, edgelist));
    return rcpp_result_gen;
END_RCPP
}
// cosineClosenessC
NumericVector cosineClosenessC(NumericMatrix latentSpacePos, IntegerMatrix edgelist);
RcppExport SEXP _CIDnetworks_cosineClosenessC(SEXP latentSpacePosSEXP, SEXP edgelistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type latentSpacePos(latentSpacePosSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgelist(edgelistSEXP);
    rcpp_result_gen = Rcpp::wrap(cosineClosenessC(latentSpacePos, edgelist));
    return rcpp_result_gen;
END_RCPP
}
// coincidence
IntegerMatrix coincidence(IntegerMatrix edgelist, int nodes);
RcppExport SEXP _CIDnetworks_coincidence(SEXP edgelistSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(coincidence(edgelist, nodes));
    return rcpp_result_gen;
END_RCPP
}
// xty
NumericVector xty(IntegerMatrix edgelist, NumericVector outcome, int nodes);
RcppExport SEXP _CIDnetworks_xty(SEXP edgelistSEXP, SEXP outcomeSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(xty(edgelist, outcome, nodes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CIDnetworks_makeArcList", (DL_FUNC) &_CIDnetworks_makeArcList, 1},
    {"_CIDnetworks_makeEdgeList", (DL_FUNC) &_CIDnetworks_makeEdgeList, 1},
    {"_CIDnetworks_makeEdgeListSelfies", (DL_FUNC) &_CIDnetworks_makeEdgeListSelfies, 1},
    {"_CIDnetworks_symBlock", (DL_FUNC) &_CIDnetworks_symBlock, 1},
    {"_CIDnetworks_eldc", (DL_FUNC) &_CIDnetworks_eldc, 2},
    {"_CIDnetworks_cosineClosenessC", (DL_FUNC) &_CIDnetworks_cosineClosenessC, 2},
    {"_CIDnetworks_coincidence", (DL_FUNC) &_CIDnetworks_coincidence, 2},
    {"_CIDnetworks_xty", (DL_FUNC) &_CIDnetworks_xty, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CIDnetworks(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
